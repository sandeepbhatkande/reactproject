# Stages
stages:
  - test
  - send-reports

# Files or directory that should be cached throughout the pipeline
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/

# Variables that needs be used throughout the pipeline are defined
variables:
  # Sonarqube server Url
  SONAR_SERVER_URL: "http://3.81.106.178:9000"

  # Text that is defined as a sonar.host.url value in sonar propertes file
  SONAR_SERVER_URL_DUMMY_TEXT: "##SonarServerURL##"
  
  # Text that is defined as sonar.login value in sonar properties file
  SONAR_LOGIN_TOKEN_DUMMY_TEXT: "##ProjectSonarLogin##"

  # Text that is defined as sonar.login value in sonar
  SONAR_PROJECT_KEY_DUMMY_TEXT: "##ProjectSonarKey##"

  # Specify Group Name of the Git repo
  REPO_GROUP_NAME: "AppTemplates"

  # Specify Name of the Git repo
  # For example, if git repo is MicroFrontend/trace-hierarchy-dependency then project name is trace-hierarchy-dependency
  REPO_NAME: "reactapp"

  # AWS url for storing reports
  AWS_LINK: s3://digite-releases/atlas/$REPO_GROUP_NAME/$REPO_NAME/Jest

  # These are optional. Only required when package.json file requires git repo dependencies
  # Gitlab variable with the name GIT_AUTO_AUTH should be present in pipeline. Keep it as default 
  PACKAGE_GIT_TEXT: "gitserver.digite.in"
  PACKAGE_GIT_AUTH_TEXT: "git_auto:$GIT_AUTO_AUTH@gitserver.digite.in"

  GIT_DEPTH: 0


# Job name 
test:
  only:
# The branch for which this stage should be run. If not specified, it runs for all branches 
    - master
  tags:
# Specify the tag of gitlab runner on which this stage should be run
# Make sure that a gitlab runner with this tag is enabled for this repo
    - rc-comp1
# Stage name that will be defined here
  stage: test
  script:
# Here, the scripts are written to be executed
    - sed -i "s+$PACKAGE_GIT_TEXT+$PACKAGE_GIT_AUTH_TEXT+g" package.json
    - yarn  
    - yarn test
# This section is required to pass required reports to the furthur stages(For code coverage in sonar).
  artifacts:
    paths:
# Files/folders which are needed for furthur use
# Currently, its coverage folder and test report file created by jest
      - src/coverage
      - test-report.html
#The period till these folder/files are required
    expire_in: 10 min 

send-reports:
  only:
    - master
  tags:
    - rc-comp1
  stage: send-reports
  script:
#Reports are uploaded to aws
#Make sure that gitlab variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are present in the repo settings
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
#Here, you have to specify the aws paths in which reports will be uploaded
    - aws s3 cp test-report.html $AWS_LINK/$CI_JOB_ID/
    - aws s3 cp src/coverage/lcov-report $AWS_LINK/$CI_JOB_ID/coverage/ --recursive
#Python file is executed which sends email
#Make sure that EMAIL_CRED gitlab variable is present in the repo settings
    - sed -i "s+#emailcred#+$EMAIL_CRED+g" config.ini
    - pip3 install -r requirements.txt
    - python3 devops_jestparser_result.py -j $CI_JOB_ID
